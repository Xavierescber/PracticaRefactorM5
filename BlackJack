// BJ_M5.cpp : Este archivo contiene la función "main". La ejecución del programa comienza y termina ahí.
//

#include <iostream>
#include <io.h>
#include <Windows.h>
using namespace std;

//Variables de uso
const int numCartas = 13;
int picas[numCartas];
int diamantes[numCartas];
int corazones[numCartas];
int treboles[numCartas];
bool gameOver = false;
int valorCarta;
int aleatorio;
int valorAs = 0;
bool chosed;
string choice = "";
string nombreCarta;
//Variables Jugador 1
string player1 = "Javi";
int pointsPlayer1 = 0;
bool surrender1 = false;
bool winnerP1 = false;
bool loserP1 = false;

//Variables Jugador 2
string player2 = "Croupiere";
int pointsPlayer2 = 0;
bool surrender2 = false;
bool winnerP2 = false;
bool loserP2 = false;


//Funciones

//Inicializa cualquier array con sus 13 posiciones a 1
//de esta forma, indicamos que todas las cartas están disponibles
//si una posición está a 0, esa carta ya está repartida y no se repite
void inicializaArray(int(&pArray)[numCartas]) {
    for (int i = 0; i < numCartas; i++) {
        pArray[i] = 1;
    }
}

//Comprueba aleatoriamente si ha de dar picas o diamantes
//y busca una carta al azar. Hasta que no encuentre una posición
// a 1, no asigna esa carta, cuyo valor es el indiceCarta + 1
void chooseCards(int& totalPoints, string player) {
    bool choosed = false;
    int indiceCarta = 0;
    string tipoPalo;
    while (!choosed) {
        //Elije una carta del 1 al 12 y un random para escoge rpalo
        aleatorio = rand() % 4;
        indiceCarta = rand() % numCartas;
        //Comprueba las Copas
        if (aleatorio == 0) {
            if (picas[indiceCarta] == 1) {
                //devuelve la carta
                picas[indiceCarta] = 0;
                choosed = true;
                tipoPalo = "picas";
            }
            //Comprueba los diamantes
        }
        else if (aleatorio == 1) {
            if (diamantes[indiceCarta] == 1) {
                //devuelve la tarjeta
                diamantes[indiceCarta] = 0;
                choosed = true;
                tipoPalo = "diamantes";
            }
        }
        else if (aleatorio == 2) {
            if (corazones[indiceCarta] == 1)
            {
                corazones[indiceCarta] = 0;
                choosed = true;
                tipoPalo = "corazones";
            }
        }
        else if (aleatorio == 3) {
            if (treboles[indiceCarta] == 1)
            {
                treboles[indiceCarta] = 0;
                choosed = true;
                tipoPalo = "treboles";
            }
        }
    }
        if ((indiceCarta + 1 <= 10) && (indiceCarta + 1 != 1))
        {
            valorCarta = indiceCarta + 1;
            nombreCarta = indiceCarta + 1;
        }
        else if ((indiceCarta + 1 > 10) && (indiceCarta + 1 != 1))
        {
            valorCarta = 10;
        }
        else if ((indiceCarta + 1 == 1) && (player == player1)) {
            valorAs = 0;
            while (valorAs != 1 && valorAs != 11) {
                cout << "Te ha salido un as y tienes " << totalPoints << "cuanto quieres que valga ? \n";
                cout << "1" << endl;
                cout << "11" << endl;
                cin >> valorAs;
                if (valorAs != 1 && valorAs != 11) {
                    cout << "Solo puede valer 1 o 11" << endl;
                }
            }
            valorCarta = valorAs;

        }
        else if ((indiceCarta + 1 == 1) && (player == player2)) {
            if (totalPoints + 11 > 21)
            {
                valorCarta = 1;
            }
            else {
                valorCarta = 11;
            }
        }



    totalPoints += valorCarta;
    cout << "El jugador " << player << " ha sacado un " << valorCarta << " de " << tipoPalo << " y tiene un total de " << totalPoints << endl;

} 

bool checkPoints(int& points, bool& winner, bool& loser) {
    if (points == 21) {
        winner = false;
        return true;
    }
    else if (points > 21) {
        loser = true;
        return true;
    }
    return false;
}

bool checkWhoWins(int points1, int points2, bool& winner2) {
    if (points2 > points1) {
        winner2 = true;
        return true;
    }
    else {
        return false;
    }
}

int main()
{
    inicializaArray(picas);
    inicializaArray(diamantes);
    srand(time(NULL));
    //primer reparto de cartas
    chooseCards(pointsPlayer1, player1);
    Sleep(10);
    chooseCards(pointsPlayer1, player1);
    Sleep(10);
    surrender1 = checkPoints(pointsPlayer1, winnerP1, loserP1);
    Sleep(10);
    chooseCards(pointsPlayer2, player2);
    Sleep(10);
    while (!surrender1) {
        choice = "0";
        //Comienza el juego con el jugador 1
        while (choice != "1" && choice != "2") {
            cout << "Tienes " << pointsPlayer1 << ".Quieres pedir carta?" << endl;
            cout << "1.- Si" << endl;
            cout << "2.- No" << endl;
            cin >> choice;
            if (choice != "1" && choice != "2") {
                cout << "Por favor, elije una opción válida." << endl;
            }
        }
        if (choice == "1") {
            chooseCards(pointsPlayer1, player1);
            surrender1 = checkPoints(pointsPlayer1, winnerP1, loserP1);
            //comprueba si se ha pasado o ha ganado la partida
        }
        else {
            //Si no quiere carta, es turno de la banca
            surrender1 = true;
        }
    }
    //Termina el turno del jugador 1. Hay que comprobar si ha ganado (winnerP1) o perdido ya (loserP1), o si la banca tiene que tirar
    if (pointsPlayer1 == pointsPlayer2) {
        cout << "Empate" << endl;
    }
    else if (winnerP1) {
        cout << "El jugador " << player1 << "gana y la banca pierde" << endl;
    }
    else if (loserP1) {
        cout << "El jugador " << player1 << "pierde y la banca gana" << endl;
    }
    else {
        //turno de la banca
        while ((!surrender2)&&(pointsPlayer2<=pointsPlayer1)) {
            chooseCards(pointsPlayer2, player2);
            Sleep(10);
            surrender2 = checkPoints(pointsPlayer2, winnerP2, loserP2);
            if (!surrender2) {
                //Comprueba si la banca ya gana por puntos
                surrender2 = checkWhoWins(pointsPlayer1, pointsPlayer2, winnerP2);
            }
        }
        if (winnerP2) {
            cout << "La banca gana y el jugador " << player1 << " pierde" << endl;
        }
        else if (loserP2) {
            cout << "La banca pierde y el jugador " << player1 << " gana" << endl;
        }
    }

}
